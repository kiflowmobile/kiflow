
export const SYSTEM_PROMPT = `
–¢–∏ ‚Äî –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π –≤–∏–∫–ª–∞–¥–∞—á. 
- –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: —Ç—ñ–ª—å–∫–∏ —Å—Ñ–æ—Ä–º—É–ª—é–π –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É, –Ω–µ –¥–∞–≤–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –Ω–µ –∞–Ω–∞–ª—ñ–∑—É–π.(–ù–ï –¢–†–ï–ë–ê –í–ò–ì–ê–î–£–í–ê–¢–ò, –ü–ï–†–ï–§–û–†–ú–£–õ–¨–û–í–£–í–ê–¢–ò, –ß–ò–¢–ö–û –ù–ê–ü–ò–®–ò –ó–ê–í–î–ê–ù–ù–Ø –¢–ê–ö –Ø–ö –í–û–ù–û –ù–ê–ü–ò–°–ê–ù–û –í –ü–†–û–ú–ü–¢–Ü )
- –£ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö: –∞–Ω–∞–ª—ñ–∑—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç–∞.
- –û—Ü—ñ–Ω—é–π —É —Ñ–æ—Ä–º–∞—Ç—ñ:

üìä –ó–ê–ì–ê–õ–¨–ù–ê –û–¶–Ü–ù–ö–ê: [1‚Äì10]/10

üéØ –û–¶–Ü–ù–ö–ê –ü–û –ö–†–ò–¢–ï–†–Ü–Ø–•:
‚Ä¢ –ü–æ–±—É–¥–æ–≤–∞ –¥—ñ–∞–ª–æ–≥—É –∑ –ø–∞—Å–∏–≤–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º: [1‚Äì5]/5 ‚Äî [–ø–æ—è—Å–Ω–µ–Ω–Ω—è]
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–≤–∏ –∑–∞–ª—É—á–µ–Ω–Ω—è —Ç–∞ —ñ–Ω—Ç–µ—Ä–µ—Å—É: [1‚Äì5]/5 ‚Äî [–ø–æ—è—Å–Ω–µ–Ω–Ω—è]

üí° –§–Ü–î–ë–ï–ö:
‚úÖ –°–ò–õ–¨–ù–Ü –°–¢–û–†–û–ù–ò: ...
üîß –©–û –ü–û–ö–†–ê–©–ò–¢–ò: ...
üöÄ –ù–ê–°–¢–£–ü–ù–ò–ô –ö–†–û–ö: ...
- –ú–æ–≤–∞: —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞.
`;

const GEMINI_API_KEY = process.env.EXPO_PUBLIC_GEMINI_API_KEY;

export async function askGemini(
  messages: Message[],
  slidePrompt: string,
  isFirstMessage: boolean,
  model: string = "gemini-2.0-flash"
): Promise<string> {
  if (!GEMINI_API_KEY) {
    console.error("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π");
    return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π API –∫–ª—é—á.";
  }

  const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent`;

  // –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞
  const lastUserMessage = messages.filter((m) => m.role === "user").slice(-1)[0];



  let content;

  if (isFirstMessage) {
    console.log("true");
    content = `–ü–æ–∫–∞–∂–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –∫–µ–π—Å—É, —â–æ –π–¥–µ –ø—ñ—Å–ª—è —Å–ª–æ–≤–∞ "–ö–ï–ô–°". –ù–µ –¥–∞–≤–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –Ω–µ –∞–Ω–∞–ª—ñ–∑—É–π. ${slidePrompt}`;
  } else {
    console.log("false");
    if (lastUserMessage.text) {
      content = `–û—Ü—ñ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –∑ —Ü—å–æ–≥–æ –æ–ø–∏—Å—É: ${slidePrompt}
  –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç–∞: ${lastUserMessage.text}`;
    }
  }
  

  const body = {
    contents: [
      {
        role: "user",
        parts: [{ text: content }],
      },
    ],
    generationConfig: {
      temperature: 0.3,
      topP: 0.9,
      maxOutputTokens: 800,
    },
  };

  try {
    const response = await fetch(`${url}?key=${GEMINI_API_KEY}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      const errText = await response.text();
      throw new Error(`Gemini error ${response.status}: ${errText}`);
    }

    const data = await response.json();
    return (
      data.candidates?.[0]?.content?.parts?.[0]?.text ||
      "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: Gemini –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ç–µ–∫—Å—Ç."
    );
  } catch (err) {
    console.error("Gemini API error", err);
    return "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI.";
  }
}
